{"version":3,"sources":["webpack:///./src/components/Question.vue?eeb0","webpack:///./src/views/Test.vue","webpack:///./src/components/Question.vue","webpack:///./node_modules/wanakana/esm/index.js","webpack:///./src/components/Question.vue?a3e7","webpack:///./src/components/Question.vue?09e4","webpack:///./src/components/Question.vue?0efb","webpack:///./src/components/Options.vue","webpack:///./src/components/Options.vue?11a2","webpack:///./src/components/Options.vue?9478","webpack:///./src/components/Options.vue?847a","webpack:///./src/views/Test.vue?9c6f","webpack:///./src/views/Test.vue?5317","webpack:///./src/views/Test.vue?fd64"],"names":["render","_vm","this","_c","_self","_setupProxy","currentQuestion","_v","_s","progress","questions","length","_e","on","start","attrs","nextQuestion","$event","staticRenderFns","pathPieces","ref","type","indexOf","_k","keyCode","key","enter","apply","arguments","model","value","answer","callback","$$v","expression","answered","correct","self","fullQuestion","kanji","kana","preventDefault","$emit","submit","typeOf","Object","toString","call","slice","toLowerCase","isEmpty","input","isCharInRange","char","end","code","charCodeAt","TO_KANA_METHODS","HIRAGANA","KATAKANA","ROMANIZATIONS","HEPBURN","DEFAULT_OPTIONS","useObsoleteKana","passRomaji","upcaseKatakana","IMEMode","convertLongVowelMark","romanization","LATIN_UPPERCASE_START","LATIN_UPPERCASE_END","LOWERCASE_ZENKAKU_START","LOWERCASE_ZENKAKU_END","UPPERCASE_ZENKAKU_START","UPPERCASE_ZENKAKU_END","HIRAGANA_START","HIRAGANA_END","KATAKANA_START","PROLONGED_SOUND_MARK","KANA_SLASH_DOT","ZENKAKU_NUMBERS","ZENKAKU_UPPERCASE","ZENKAKU_LOWERCASE","ZENKAKU_PUNCTUATION_1","ZENKAKU_PUNCTUATION_2","ZENKAKU_PUNCTUATION_3","ZENKAKU_PUNCTUATION_4","ZENKAKU_SYMBOLS_CURRENCY","HIRAGANA_CHARS","KATAKANA_CHARS","HANKAKU_KATAKANA","KATAKANA_PUNCTUATION","KANA_PUNCTUATION","CJK_SYMBOLS_PUNCTUATION","COMMON_CJK","RARE_CJK","KANA_RANGES","JA_PUNCTUATION_RANGES","JAPANESE_RANGES","MODERN_ENGLISH","HEPBURN_MACRON_RANGES","SMART_QUOTE_RANGES","isCharJapanese","some","isJapanese","allowed","augmented","every","isJa","test","safeIsNaN","Number","isNaN","isEqual","first","second","areInputsEqual","newInputs","lastInputs","i","memoizeOne","resultFn","cache","memoized","newArgs","_i","lastThis","lastArgs","lastResult","clear","has","prototype","hasOwnProperty","find","iter","tar","keys","dequal","foo","bar","ctor","len","tmp","constructor","Date","getTime","RegExp","Array","Set","size","Map","get","ArrayBuffer","Uint8Array","DataView","byteLength","getInt8","isView","mergeWithDefaultOptions","opts","assign","applyMapping","string","mapping","convertEnding","root","nextSubtree","tree","nextChar","subtree","undefined","newChunk","remaining","currentCursor","firstChar","charAt","parse","lastCursor","concat","transform","entries","reduce","map","endOfBranch","getSubTreeOf","split","correctSubTree","createCustomMapping","customMap","customTree","forEach","roma","subTree","mapCopy","JSON","stringify","transformMap","mapSubtree","customSubtree","newSubtree","mergeCustomMapping","customMapping","BASIC_KUNREI","a","u","e","o","k","s","t","n","h","m","y","r","w","g","z","d","b","p","v","SPECIAL_SYMBOLS$1","CONSONANTS","q","f","SMALL_Y$1","ya","yi","yu","ye","yo","SMALL_VOWELS","ALIASES","sh","ch","cy","chy","shy","j","jy","shi","chi","tsu","ji","fu","SMALL_LETTERS","tu","wa","ka","ke","SPECIAL_CASES","wu","wi","we","kwa","whu","tha","thu","tho","dha","dhu","dho","AIUEO_CONSTRUCTIONS","wh","kw","qw","gw","sw","ts","th","tw","dh","dw","fw","createRomajiToKanaMap$1","kanaTree","subtreeOf","getAlternatives","list","alt","startsWith","replace","addTsu","tsuTree","consonant","yKana","symbol","jsymbol","aiueoKana","vowel","nChar","c","alternative","allExceptLast","last","parentTree","kunreiRoma","chars","xRoma","xSubtree","altRoma","prefix","altParentTree","freeze","romajiToKanaMap","getRomajiToKanaTree","USE_OBSOLETE_KANA_MAP","IME_MODE_MAP","isCharUpperCase","isCharLongDash","isCharSlashDot","isCharHiragana","hiraganaToKatakana","kata","push","kataChar","String","fromCharCode","join","createRomajiToKanaMap","customKanaMapping","toKana","options","config","splitIntoConvertedKana","kanaToken","enforceHiragana","enforceKatakana","LISTENERS","makeOnInput","prevInput","mergedConfig","preConfiguredMap","triggers","toUpperCase","target","dataset","ignoreComposition","convertInput","head","textToConvert","tail","splitInput","selectionEnd","convertedText","changed","newCursor","newValue","setTimeout","setSelectionRange","onComposition","data","isMacOS","window","navigator","platform","trackListeners","id","inputHandler","compositionHandler","text","cursor","toConvert","includes","workFromStart","workBackwards","takeWhileAndSlice","catalystChars","startIndex","reverse","source","predicate","x","result","onInput","selectionStart","console","log","onCompositionStart","onCompositionUpdate","onCompositionEnd","events","compositionstart","compositionupdate","compositionend","addDebugListeners","event","handler","addEventListener","ELEMENTS","idCounter","newId","now","bind","element","debug","nodeName","Error","setAttribute","kanaToHepburnMap","BASIC_ROMAJI","あ","い","う","え","お","か","き","く","け","こ","さ","し","す","せ","そ","た","ち","つ","て","と","な","に","ぬ","ね","の","は","ひ","ふ","へ","ほ","ま","み","む","め","も","ら","り","る","れ","ろ","や","ゆ","よ","わ","ゐ","ゑ","を","ん","が","ぎ","ぐ","げ","ご","ざ","じ","ず","ぜ","ぞ","だ","ぢ","づ","で","ど","ば","び","ぶ","べ","ぼ","ぱ","ぴ","ぷ","ぺ","ぽ","ゔぁ","ゔぃ","ゔ","ゔぇ","ゔぉ","SPECIAL_SYMBOLS","AMBIGUOUS_VOWELS","SMALL_Y","ゃ","ゅ","ょ","SMALL_Y_EXTRA","ぃ","ぇ","SMALL_AIUEO","ぁ","ぅ","ぉ","YOON_KANA","YOON_EXCEPTIONS","SMALL_KANA","っ","SOKUON_WHITELIST","getKanaToHepburnTree","createKanaToHepburnMap","getKanaToRomajiTree","romajiTree","setTrans","transliteration","firstRomajiChar","yRoma","resolveTsu","customRomajiMapping","Question","Vue","mounted","$refs","$el","path","getQuestion","question","updateAnswer","eUserAnswer","Correct","Incorrect","questionChange","__decorate","Prop","Watch","Component","components","methods","mapGetters","mapActions","component","levels","selectedLevels","ops","positivity","selectedPositivity","politeness","selectedPoliteness","form","selectedForm","Options","getLevels","selected","updateSelectedPositivity","updateSelectedPoliteness","updateSelectedForm","updateSelectedLevels","computed","mapState","Test","getQuestions","totalQuestions","randomQuestion","pop","filter","random"],"mappings":"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","file":"js/test.9b303ea8.js","sourcesContent":["export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Question.vue?vue&type=style&index=0&id=27c362fa&prod&scoped=true&lang=scss&\"","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('b-container',[(_vm.currentQuestion != null)?_c('b-row',[_c('b-col',[_c('span',[_vm._v(\"Answered: \")]),_c('span',[_vm._v(_vm._s(_vm.progress)+\" / \"+_vm._s(_vm.questions.length))])])],1):_vm._e(),_c('b-row',[_c('b-col',[(_vm.questions.length == 0)?_c('span',[_vm._v(\"All Done\")]):(_vm.currentQuestion == null)?_c('options',{on:{\"optionsSet\":_vm.start}}):_c('question',{attrs:{\"question\":_vm.currentQuestion},on:{\"next\":_vm.nextQuestion,\"update:question\":function($event){_vm.currentQuestion=$event}}})],1)],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('b-container',[_c('b-row',[_c('b-col',[_c('ul',[_c('li',[_c('span',[_vm._v(\"Verb: \")]),_c('span',[_vm._v(_vm._s(_vm.pathPieces[0]))])]),_c('li',[_c('span',[_vm._v(\"Form: \")]),_c('span',[_vm._v(_vm._s(_vm.pathPieces[1]))])]),_c('li',[_c('span',[_vm._v(\"Politeness: \")]),_vm._v(_vm._s(_vm.pathPieces[2])),_c('span')]),_c('li',[_c('span',[_vm._v(\"Positivitiy: \")]),_c('span',[_vm._v(_vm._s(_vm.pathPieces[3]))])])])])],1),_c('b-row',[_c('b-col',[_c('b-form-input',{ref:\"input\",on:{\"keyup\":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,\"enter\",13,$event.key,\"Enter\"))return null;return _vm.enter.apply(null, arguments)}},model:{value:(_vm.answer),callback:function ($$v) {_vm.answer=$$v},expression:\"answer\"}}),(_vm.answered)?[(_vm.correct)?_c('span',[_vm._v(\"Correct\")]):_c('span',[_vm._v(\"Incorrect - \"+_vm._s(_vm.self.fullQuestion.kanji)+\" (\"+_vm._s(_vm.self.fullQuestion.kana)+\")\")])]:_vm._e()],2)],1),_c('b-row',[_c('b-col',[(!_vm.answered)?_c('b-button',{on:{\"click\":function($event){$event.preventDefault();return _vm.submit.apply(null, arguments)}}},[_vm._v(\"Submit\")]):_c('b-button',{on:{\"click\":function($event){$event.preventDefault();return _vm.$emit('next', true)}}},[_vm._v(\"Next\")])],1)],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/**\n * Returns detailed type as string (instead of just 'object' for arrays etc)\n * @private\n * @param {any} value js value\n * @returns {String} type of value\n * @example\n * typeOf({}); // 'object'\n * typeOf([]); // 'array'\n * typeOf(function() {}); // 'function'\n * typeOf(/a/); // 'regexp'\n * typeOf(new Date()); // 'date'\n * typeOf(null); // 'null'\n * typeOf(undefined); // 'undefined'\n * typeOf('a'); // 'string'\n * typeOf(1); // 'number'\n * typeOf(true); // 'boolean'\n * typeOf(new Map()); // 'map'\n * typeOf(new Set()); // 'map'\n */\nfunction typeOf(value) {\n  if (value === null) {\n    return 'null';\n  }\n  if (value !== Object(value)) {\n    return typeof value;\n  }\n  return {}.toString\n    .call(value)\n    .slice(8, -1)\n    .toLowerCase();\n}\n\n/**\n * Checks if input string is empty\n * @param  {String} input text input\n * @return {Boolean} true if no input\n */\nfunction isEmpty(input) {\n  if (typeOf(input) !== 'string') {\n    return true;\n  }\n  return !input.length;\n}\n\n/**\n * Takes a character and a unicode range. Returns true if the char is in the range.\n * @param  {String}  char  unicode character\n * @param  {Number}  start unicode start range\n * @param  {Number}  end   unicode end range\n * @return {Boolean}\n */\nfunction isCharInRange(char = '', start, end) {\n  if (isEmpty(char)) return false;\n  const code = char.charCodeAt(0);\n  return start <= code && code <= end;\n}\n\nconst VERSION = '5.0.2';\n\nconst TO_KANA_METHODS = {\n  HIRAGANA: 'toHiragana',\n  KATAKANA: 'toKatakana',\n};\n\nconst ROMANIZATIONS = {\n  HEPBURN: 'hepburn',\n};\n\n/**\n * Default config for WanaKana, user passed options will be merged with these\n * @type {DefaultOptions}\n * @name defaultOptions\n * @property {Boolean} [useObsoleteKana=false] - Set to true to use obsolete characters, such as ゐ and ゑ.\n * @example\n * toHiragana('we', { useObsoleteKana: true })\n * // => 'ゑ'\n * @property {Boolean} [passRomaji=false] - Set to true to pass romaji when using mixed syllabaries with toKatakana() or toHiragana()\n * @example\n * toHiragana('only convert the katakana: ヒラガナ', { passRomaji: true })\n * // => \"only convert the katakana: ひらがな\"\n * @property {Object} [convertLongVowelMark=true] - Set to false to prevent conversions of 'ー' to extended vowels with toHiragana()\n * @example\n * toHiragana('ラーメン', { convertLongVowelMark: false });\n * // => 'らーめん\n * @property {Boolean} [upcaseKatakana=false] - Set to true to convert katakana to uppercase using toRomaji()\n * @example\n * toRomaji('ひらがな カタカナ', { upcaseKatakana: true })\n * // => \"hiragana KATAKANA\"\n * @property {Boolean|String} [IMEMode=false] - Set to true, 'toHiragana', or 'toKatakana' to handle conversion while it is being typed.\n * @property {String} [romanization='hepburn'] - choose toRomaji() romanization map (currently only 'hepburn')\n * @property {Object} [customKanaMapping] - custom map will be merged with default conversion\n * @example\n * toKana('wanakana', { customKanaMapping: { na: 'に', ka: 'Bana' }) };\n * // => 'わにBanaに'\n * @property {Object} [customRomajiMapping] - custom map will be merged with default conversion\n * @example\n * toRomaji('つじぎり', { customRomajiMapping: { じ: 'zi', つ: 'tu', り: 'li' }) };\n * // => 'tuzigili'\n */\nconst DEFAULT_OPTIONS = {\n  useObsoleteKana: false,\n  passRomaji: false,\n  upcaseKatakana: false,\n  IMEMode: false,\n  convertLongVowelMark: true,\n  romanization: ROMANIZATIONS.HEPBURN,\n};\nconst LATIN_UPPERCASE_START = 0x41;\nconst LATIN_UPPERCASE_END = 0x5a;\nconst LOWERCASE_ZENKAKU_START = 0xff41;\nconst LOWERCASE_ZENKAKU_END = 0xff5a;\nconst UPPERCASE_ZENKAKU_START = 0xff21;\nconst UPPERCASE_ZENKAKU_END = 0xff3a;\nconst HIRAGANA_START = 0x3041;\nconst HIRAGANA_END = 0x3096;\nconst KATAKANA_START = 0x30a1;\nconst KATAKANA_END = 0x30fc;\nconst KANJI_START = 0x4e00;\nconst KANJI_END = 0x9faf;\nconst PROLONGED_SOUND_MARK = 0x30fc;\nconst KANA_SLASH_DOT = 0x30fb;\n\nconst ZENKAKU_NUMBERS = [0xff10, 0xff19];\nconst ZENKAKU_UPPERCASE = [UPPERCASE_ZENKAKU_START, UPPERCASE_ZENKAKU_END];\nconst ZENKAKU_LOWERCASE = [LOWERCASE_ZENKAKU_START, LOWERCASE_ZENKAKU_END];\nconst ZENKAKU_PUNCTUATION_1 = [0xff01, 0xff0f];\nconst ZENKAKU_PUNCTUATION_2 = [0xff1a, 0xff1f];\nconst ZENKAKU_PUNCTUATION_3 = [0xff3b, 0xff3f];\nconst ZENKAKU_PUNCTUATION_4 = [0xff5b, 0xff60];\nconst ZENKAKU_SYMBOLS_CURRENCY = [0xffe0, 0xffee];\n\nconst HIRAGANA_CHARS = [0x3040, 0x309f];\nconst KATAKANA_CHARS = [0x30a0, 0x30ff];\nconst HANKAKU_KATAKANA = [0xff66, 0xff9f];\nconst KATAKANA_PUNCTUATION = [0x30fb, 0x30fc];\nconst KANA_PUNCTUATION = [0xff61, 0xff65];\nconst CJK_SYMBOLS_PUNCTUATION = [0x3000, 0x303f];\nconst COMMON_CJK = [0x4e00, 0x9fff];\nconst RARE_CJK = [0x3400, 0x4dbf];\n\nconst KANA_RANGES = [\n  HIRAGANA_CHARS,\n  KATAKANA_CHARS,\n  KANA_PUNCTUATION,\n  HANKAKU_KATAKANA,\n];\n\nconst JA_PUNCTUATION_RANGES = [\n  CJK_SYMBOLS_PUNCTUATION,\n  KANA_PUNCTUATION,\n  KATAKANA_PUNCTUATION,\n  ZENKAKU_PUNCTUATION_1,\n  ZENKAKU_PUNCTUATION_2,\n  ZENKAKU_PUNCTUATION_3,\n  ZENKAKU_PUNCTUATION_4,\n  ZENKAKU_SYMBOLS_CURRENCY,\n];\n\n// All Japanese unicode start and end ranges\n// Includes kanji, kana, zenkaku latin chars, punctuation, and number ranges.\nconst JAPANESE_RANGES = [\n  ...KANA_RANGES,\n  ...JA_PUNCTUATION_RANGES,\n  ZENKAKU_UPPERCASE,\n  ZENKAKU_LOWERCASE,\n  ZENKAKU_NUMBERS,\n  COMMON_CJK,\n  RARE_CJK,\n];\n\nconst MODERN_ENGLISH = [0x0000, 0x007f];\nconst HEPBURN_MACRON_RANGES = [\n  [0x0100, 0x0101], // Ā ā\n  [0x0112, 0x0113], // Ē ē\n  [0x012a, 0x012b], // Ī ī\n  [0x014c, 0x014d], // Ō ō\n  [0x016a, 0x016b], // Ū ū\n];\nconst SMART_QUOTE_RANGES = [\n  [0x2018, 0x2019], // ‘ ’\n  [0x201c, 0x201d], // “ ”\n];\n\nconst ROMAJI_RANGES = [MODERN_ENGLISH, ...HEPBURN_MACRON_RANGES];\n\nconst EN_PUNCTUATION_RANGES = [\n  [0x20, 0x2f],\n  [0x3a, 0x3f],\n  [0x5b, 0x60],\n  [0x7b, 0x7e],\n  ...SMART_QUOTE_RANGES,\n];\n\n/**\n * Tests a character. Returns true if the character is [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharJapanese(char = '') {\n  return JAPANESE_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\n/**\n * Test if `input` only includes [Kanji](https://en.wikipedia.org/wiki/Kanji), [Kana](https://en.wikipedia.org/wiki/Kana), zenkaku numbers, and JA punctuation/symbols.”\n * @param  {String} [input=''] text\n * @param  {Regexp} [allowed] additional test allowed to pass for each char\n * @return {Boolean} true if passes checks\n * @example\n * isJapanese('泣き虫')\n * // => true\n * isJapanese('あア')\n * // => true\n * isJapanese('２月') // Zenkaku numbers allowed\n * // => true\n * isJapanese('泣き虫。！〜＄') // Zenkaku/JA punctuation\n * // => true\n * isJapanese('泣き虫.!~$') // Latin punctuation fails\n * // => false\n * isJapanese('A泣き虫')\n * // => false\n * isJapanese('≪偽括弧≫', /[≪≫]/);\n * // => true\n */\nfunction isJapanese(input = '', allowed) {\n  const augmented = typeOf(allowed) === 'regexp';\n  return isEmpty(input)\n    ? false\n    : [...input].every((char) => {\n      const isJa = isCharJapanese(char);\n      return !augmented ? isJa : isJa || allowed.test(char);\n    });\n}\n\nvar safeIsNaN = Number.isNaN ||\n    function ponyfill(value) {\n        return typeof value === 'number' && value !== value;\n    };\nfunction isEqual(first, second) {\n    if (first === second) {\n        return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n        return true;\n    }\n    return false;\n}\nfunction areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n        if (!isEqual(newInputs[i], lastInputs[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) { isEqual = areInputsEqual; }\n    var cache = null;\n    function memoized() {\n        var newArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newArgs[_i] = arguments[_i];\n        }\n        if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) {\n            return cache.lastResult;\n        }\n        var lastResult = resultFn.apply(this, newArgs);\n        cache = {\n            lastResult: lastResult,\n            lastArgs: newArgs,\n            lastThis: this,\n        };\n        return lastResult;\n    }\n    memoized.clear = function clear() {\n        cache = null;\n    };\n    return memoized;\n}\n\nvar has = Object.prototype.hasOwnProperty;\n\nfunction find(iter, tar, key) {\n\tfor (key of iter.keys()) {\n\t\tif (dequal(key, tar)) return key;\n\t}\n}\n\nfunction dequal(foo, bar) {\n\tvar ctor, len, tmp;\n\tif (foo === bar) return true;\n\n\tif (foo && bar && (ctor=foo.constructor) === bar.constructor) {\n\t\tif (ctor === Date) return foo.getTime() === bar.getTime();\n\t\tif (ctor === RegExp) return foo.toString() === bar.toString();\n\n\t\tif (ctor === Array) {\n\t\t\tif ((len=foo.length) === bar.length) {\n\t\t\t\twhile (len-- && dequal(foo[len], bar[len]));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ctor === Set) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len;\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!bar.has(tmp)) return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === Map) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len[0];\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!dequal(len[1], bar.get(tmp))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === ArrayBuffer) {\n\t\t\tfoo = new Uint8Array(foo);\n\t\t\tbar = new Uint8Array(bar);\n\t\t} else if (ctor === DataView) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo.getInt8(len) === bar.getInt8(len));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ArrayBuffer.isView(foo)) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo[len] === bar[len]);\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (!ctor || typeof foo === 'object') {\n\t\t\tlen = 0;\n\t\t\tfor (ctor in foo) {\n\t\t\t\tif (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n\t\t\t\tif (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n\t\t\t}\n\t\t\treturn Object.keys(bar).length === len;\n\t\t}\n\t}\n\n\treturn foo !== foo && bar !== bar;\n}\n\n/**\n * Easy re-use of merging with default options\n * @param {Object} opts user options\n * @returns user options merged over default options\n */\nconst mergeWithDefaultOptions = (opts = {}) => Object.assign({}, DEFAULT_OPTIONS, opts);\n\nfunction applyMapping(string, mapping, convertEnding) {\n  const root = mapping;\n\n  function nextSubtree(tree, nextChar) {\n    const subtree = tree[nextChar];\n    if (subtree === undefined) {\n      return undefined;\n    }\n    // if the next child node does not have a node value, set its node value to the input\n    return Object.assign({ '': tree[''] + nextChar }, tree[nextChar]);\n  }\n\n  function newChunk(remaining, currentCursor) {\n    // start parsing a new chunk\n    const firstChar = remaining.charAt(0);\n\n    return parse(\n      Object.assign({ '': firstChar }, root[firstChar]),\n      remaining.slice(1),\n      currentCursor,\n      currentCursor + 1\n    );\n  }\n\n  function parse(tree, remaining, lastCursor, currentCursor) {\n    if (!remaining) {\n      if (convertEnding || Object.keys(tree).length === 1) {\n        // nothing more to consume, just commit the last chunk and return it\n        // so as to not have an empty element at the end of the result\n        return tree[''] ? [[lastCursor, currentCursor, tree['']]] : [];\n      }\n      // if we don't want to convert the ending, because there are still possible continuations\n      // return null as the final node value\n      return [[lastCursor, currentCursor, null]];\n    }\n\n    if (Object.keys(tree).length === 1) {\n      return [[lastCursor, currentCursor, tree['']]].concat(\n        newChunk(remaining, currentCursor)\n      );\n    }\n\n    const subtree = nextSubtree(tree, remaining.charAt(0));\n\n    if (subtree === undefined) {\n      return [[lastCursor, currentCursor, tree['']]].concat(\n        newChunk(remaining, currentCursor)\n      );\n    }\n    // continue current branch\n    return parse(subtree, remaining.slice(1), lastCursor, currentCursor + 1);\n  }\n\n  return newChunk(string, 0);\n}\n\n// transform the tree, so that for example hepburnTree['ゔ']['ぁ'][''] === 'va'\n// or kanaTree['k']['y']['a'][''] === 'きゃ'\nfunction transform(tree) {\n  return Object.entries(tree).reduce((map, [char, subtree]) => {\n    const endOfBranch = typeOf(subtree) === 'string';\n    // eslint-disable-next-line no-param-reassign\n    map[char] = endOfBranch ? { '': subtree } : transform(subtree);\n    return map;\n  }, {});\n}\n\nfunction getSubTreeOf(tree, string) {\n  return string.split('').reduce((correctSubTree, char) => {\n    if (correctSubTree[char] === undefined) {\n      // eslint-disable-next-line no-param-reassign\n      correctSubTree[char] = {};\n    }\n    return correctSubTree[char];\n  }, tree);\n}\n\n/**\n * Creates a custom mapping tree, returns a function that accepts a defaultMap which the newly created customMapping will be merged with and returned\n * (customMap) => (defaultMap) => mergedMap\n * @param  {Object} customMap { 'ka' : 'な' }\n * @return {Function} (defaultMap) => defaultMergedWithCustomMap\n * @example\n * const sillyMap = createCustomMapping({ 'ちゃ': 'time', '茎': 'cookie'　});\n * // sillyMap is passed defaultMapping to merge with when called in toRomaji()\n * toRomaji(\"It's 茎 ちゃ よ\", { customRomajiMapping: sillyMap });\n * // => 'It's cookie time yo';\n */\nfunction createCustomMapping(customMap = {}) {\n  const customTree = {};\n\n  if (typeOf(customMap) === 'object') {\n    Object.entries(customMap).forEach(([roma, kana]) => {\n      let subTree = customTree;\n      roma.split('').forEach((char) => {\n        if (subTree[char] === undefined) {\n          subTree[char] = {};\n        }\n        subTree = subTree[char];\n      });\n      subTree[''] = kana;\n    });\n  }\n\n  return function makeMap(map) {\n    const mapCopy = JSON.parse(JSON.stringify(map));\n\n    function transformMap(mapSubtree, customSubtree) {\n      if (mapSubtree === undefined || typeOf(mapSubtree) === 'string') {\n        return customSubtree;\n      }\n      return Object.entries(customSubtree).reduce(\n        (newSubtree, [char, subtree]) => {\n          // eslint-disable-next-line no-param-reassign\n          newSubtree[char] = transformMap(mapSubtree[char], subtree);\n          return newSubtree;\n        },\n        mapSubtree\n      );\n    }\n\n    return transformMap(mapCopy, customTree);\n  };\n}\n\n// allow consumer to pass either function or object as customMapping\nfunction mergeCustomMapping(map, customMapping) {\n  if (!customMapping) {\n    return map;\n  }\n  return typeOf(customMapping) === 'function'\n    ? customMapping(map)\n    : createCustomMapping(customMapping)(map);\n}\n\n// NOTE: not exactly kunrei shiki, for example ぢゃ -> dya instead of zya, to avoid name clashing\n/* eslint-disable */\n// prettier-ignore\nconst BASIC_KUNREI = {\n  a: 'あ', i: 'い', u: 'う', e: 'え', o: 'お',\n  k: { a: 'か', i: 'き', u: 'く', e: 'け', o: 'こ', },\n  s: { a: 'さ', i: 'し', u: 'す', e: 'せ', o: 'そ', },\n  t: { a: 'た', i: 'ち', u: 'つ', e: 'て', o: 'と', },\n  n: { a: 'な', i: 'に', u: 'ぬ', e: 'ね', o: 'の', },\n  h: { a: 'は', i: 'ひ', u: 'ふ', e: 'へ', o: 'ほ', },\n  m: { a: 'ま', i: 'み', u: 'む', e: 'め', o: 'も', },\n  y: { a: 'や', u: 'ゆ', o: 'よ' },\n  r: { a: 'ら', i: 'り', u: 'る', e: 'れ', o: 'ろ', },\n  w: { a: 'わ', i: 'ゐ', e: 'ゑ', o: 'を', },\n  g: { a: 'が', i: 'ぎ', u: 'ぐ', e: 'げ', o: 'ご', },\n  z: { a: 'ざ', i: 'じ', u: 'ず', e: 'ぜ', o: 'ぞ', },\n  d: { a: 'だ', i: 'ぢ', u: 'づ', e: 'で', o: 'ど', },\n  b: { a: 'ば', i: 'び', u: 'ぶ', e: 'べ', o: 'ぼ', },\n  p: { a: 'ぱ', i: 'ぴ', u: 'ぷ', e: 'ぺ', o: 'ぽ', },\n  v: { a: 'ゔぁ', i: 'ゔぃ', u: 'ゔ', e: 'ゔぇ', o: 'ゔぉ', },\n};\n\nconst SPECIAL_SYMBOLS$1 = {\n  '.': '。',\n  ',': '、',\n  ':': '：',\n  '/': '・',\n  '!': '！',\n  '?': '？',\n  '~': '〜',\n  '-': 'ー',\n  '‘': '「',\n  '’': '」',\n  '“': '『',\n  '”': '』',\n  '[': '［',\n  ']': '］',\n  '(': '（',\n  ')': '）',\n  '{': '｛',\n  '}': '｝',\n};\n\nconst CONSONANTS = {\n  k: 'き',\n  s: 'し',\n  t: 'ち',\n  n: 'に',\n  h: 'ひ',\n  m: 'み',\n  r: 'り',\n  g: 'ぎ',\n  z: 'じ',\n  d: 'ぢ',\n  b: 'び',\n  p: 'ぴ',\n  v: 'ゔ',\n  q: 'く',\n  f: 'ふ',\n};\nconst SMALL_Y$1 = { ya: 'ゃ', yi: 'ぃ', yu: 'ゅ', ye: 'ぇ', yo: 'ょ' };\nconst SMALL_VOWELS = { a: 'ぁ', i: 'ぃ', u: 'ぅ', e: 'ぇ', o: 'ぉ' };\n\n// typing one should be the same as having typed the other instead\nconst ALIASES = {\n  sh: 'sy', // sha -> sya\n  ch: 'ty', // cho -> tyo\n  cy: 'ty', // cyo -> tyo\n  chy: 'ty', // chyu -> tyu\n  shy: 'sy', // shya -> sya\n  j: 'zy', // ja -> zya\n  jy: 'zy', // jye -> zye\n\n  // exceptions to above rules\n  shi: 'si',\n  chi: 'ti',\n  tsu: 'tu',\n  ji: 'zi',\n  fu: 'hu',\n};\n\n// xtu -> っ\nconst SMALL_LETTERS = Object.assign(\n  {\n    tu: 'っ',\n    wa: 'ゎ',\n    ka: 'ヵ',\n    ke: 'ヶ',\n  },\n  SMALL_VOWELS,\n  SMALL_Y$1\n);\n\n// don't follow any notable patterns\nconst SPECIAL_CASES = {\n  yi: 'い',\n  wu: 'う',\n  ye: 'いぇ',\n  wi: 'うぃ',\n  we: 'うぇ',\n  kwa: 'くぁ',\n  whu: 'う',\n  // because it's not thya for てゃ but tha\n  // and tha is not てぁ, but てゃ\n  tha: 'てゃ',\n  thu: 'てゅ',\n  tho: 'てょ',\n  dha: 'でゃ',\n  dhu: 'でゅ',\n  dho: 'でょ',\n};\n\nconst AIUEO_CONSTRUCTIONS = {\n  wh: 'う',\n  kw: 'く',\n  qw: 'く',\n  q: 'く',\n  gw: 'ぐ',\n  sw: 'す',\n  ts: 'つ',\n  th: 'て',\n  tw: 'と',\n  dh: 'で',\n  dw: 'ど',\n  fw: 'ふ',\n  f: 'ふ',\n};\n\n/* eslint-enable */\nfunction createRomajiToKanaMap$1() {\n  const kanaTree = transform(BASIC_KUNREI);\n  // pseudo partial application\n  const subtreeOf = (string) => getSubTreeOf(kanaTree, string);\n\n  // add tya, sya, etc.\n  Object.entries(CONSONANTS).forEach(([consonant, yKana]) => {\n    Object.entries(SMALL_Y$1).forEach(([roma, kana]) => {\n      // for example kyo -> き + ょ\n      subtreeOf(consonant + roma)[''] = yKana + kana;\n    });\n  });\n\n  Object.entries(SPECIAL_SYMBOLS$1).forEach(([symbol, jsymbol]) => {\n    subtreeOf(symbol)[''] = jsymbol;\n  });\n\n  // things like うぃ, くぃ, etc.\n  Object.entries(AIUEO_CONSTRUCTIONS).forEach(([consonant, aiueoKana]) => {\n    Object.entries(SMALL_VOWELS).forEach(([vowel, kana]) => {\n      const subtree = subtreeOf(consonant + vowel);\n      subtree[''] = aiueoKana + kana;\n    });\n  });\n\n  // different ways to write ん\n  ['n', \"n'\", 'xn'].forEach((nChar) => {\n    subtreeOf(nChar)[''] = 'ん';\n  });\n\n  // c is equivalent to k, but not for chi, cha, etc. that's why we have to make a copy of k\n  kanaTree.c = JSON.parse(JSON.stringify(kanaTree.k));\n\n  Object.entries(ALIASES).forEach(([string, alternative]) => {\n    const allExceptLast = string.slice(0, string.length - 1);\n    const last = string.charAt(string.length - 1);\n    const parentTree = subtreeOf(allExceptLast);\n    // copy to avoid recursive containment\n    parentTree[last] = JSON.parse(JSON.stringify(subtreeOf(alternative)));\n  });\n\n  function getAlternatives(string) {\n    return [...Object.entries(ALIASES), ...[['c', 'k']]].reduce(\n      (list, [alt, roma]) => (string.startsWith(roma) ? list.concat(string.replace(roma, alt)) : list),\n      []\n    );\n  }\n\n  Object.entries(SMALL_LETTERS).forEach(([kunreiRoma, kana]) => {\n    const last = (char) => char.charAt(char.length - 1);\n    const allExceptLast = (chars) => chars.slice(0, chars.length - 1);\n    const xRoma = `x${kunreiRoma}`;\n    const xSubtree = subtreeOf(xRoma);\n    xSubtree[''] = kana;\n\n    // ltu -> xtu -> っ\n    const parentTree = subtreeOf(`l${allExceptLast(kunreiRoma)}`);\n    parentTree[last(kunreiRoma)] = xSubtree;\n\n    // ltsu -> ltu -> っ\n    getAlternatives(kunreiRoma).forEach((altRoma) => {\n      ['l', 'x'].forEach((prefix) => {\n        const altParentTree = subtreeOf(prefix + allExceptLast(altRoma));\n        altParentTree[last(altRoma)] = subtreeOf(prefix + kunreiRoma);\n      });\n    });\n  });\n\n  Object.entries(SPECIAL_CASES).forEach(([string, kana]) => {\n    subtreeOf(string)[''] = kana;\n  });\n\n  // add kka, tta, etc.\n  function addTsu(tree) {\n    return Object.entries(tree).reduce((tsuTree, [key, value]) => {\n      if (!key) {\n        // we have reached the bottom of this branch\n        // eslint-disable-next-line no-param-reassign\n        tsuTree[key] = `っ${value}`;\n      } else {\n        // more subtrees\n        // eslint-disable-next-line no-param-reassign\n        tsuTree[key] = addTsu(value);\n      }\n      return tsuTree;\n    }, {});\n  }\n  // have to explicitly name c here, because we made it a copy of k, not a reference\n  [...Object.keys(CONSONANTS), 'c', 'y', 'w', 'j'].forEach((consonant) => {\n    const subtree = kanaTree[consonant];\n    subtree[consonant] = addTsu(subtree);\n  });\n  // nn should not be っん\n  delete kanaTree.n.n;\n  // solidify the results, so that there there is referential transparency within the tree\n  return Object.freeze(JSON.parse(JSON.stringify(kanaTree)));\n}\n\nlet romajiToKanaMap = null;\n\nfunction getRomajiToKanaTree() {\n  if (romajiToKanaMap == null) {\n    romajiToKanaMap = createRomajiToKanaMap$1();\n  }\n  return romajiToKanaMap;\n}\n\nconst USE_OBSOLETE_KANA_MAP = createCustomMapping({\n  wi: 'ゐ',\n  we: 'ゑ',\n});\n\nfunction IME_MODE_MAP(map) {\n  // in IME mode, we do not want to convert single ns\n  const mapCopy = JSON.parse(JSON.stringify(map));\n  mapCopy.n.n = { '': 'ん' };\n  mapCopy.n[' '] = { '': 'ん' };\n  return mapCopy;\n}\n\n/**\n * Tests if char is in English unicode uppercase range\n * @param  {String} char\n * @return {Boolean}\n */\nfunction isCharUpperCase(char = '') {\n  if (isEmpty(char)) return false;\n  return isCharInRange(char, LATIN_UPPERCASE_START, LATIN_UPPERCASE_END);\n}\n\n/**\n * Returns true if char is 'ー'\n * @param  {String} char to test\n * @return {Boolean}\n */\nfunction isCharLongDash(char = '') {\n  if (isEmpty(char)) return false;\n  return char.charCodeAt(0) === PROLONGED_SOUND_MARK;\n}\n\n/**\n * Tests if char is '・'\n * @param  {String} char\n * @return {Boolean} true if '・'\n */\nfunction isCharSlashDot(char = '') {\n  if (isEmpty(char)) return false;\n  return char.charCodeAt(0) === KANA_SLASH_DOT;\n}\n\n/**\n * Tests a character. Returns true if the character is [Hiragana](https://en.wikipedia.org/wiki/Hiragana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharHiragana(char = '') {\n  if (isEmpty(char)) return false;\n  if (isCharLongDash(char)) return true;\n  return isCharInRange(char, HIRAGANA_START, HIRAGANA_END);\n}\n\n/**\n * Convert [Hiragana](https://en.wikipedia.org/wiki/Hiragana) to [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * Passes through any non-hiragana chars\n * @private\n * @param  {String} [input=''] text input\n * @return {String} converted text\n * @example\n * hiraganaToKatakana('ひらがな')\n * // => \"ヒラガナ\"\n * hiraganaToKatakana('ひらがな is a type of kana')\n * // => \"ヒラガナ is a type of kana\"\n */\nfunction hiraganaToKatakana(input = '') {\n  const kata = [];\n  input.split('').forEach((char) => {\n    // Short circuit to avoid incorrect codeshift for 'ー' and '・'\n    if (isCharLongDash(char) || isCharSlashDot(char)) {\n      kata.push(char);\n    } else if (isCharHiragana(char)) {\n      // Shift charcode.\n      const code = char.charCodeAt(0) + (KATAKANA_START - HIRAGANA_START);\n      const kataChar = String.fromCharCode(code);\n      kata.push(kataChar);\n    } else {\n      // Pass non-hiragana chars through\n      kata.push(char);\n    }\n  });\n  return kata.join('');\n}\n\n// memoize and deeply compare args so we only recreate when necessary\nconst createRomajiToKanaMap = memoizeOne(\n  (IMEMode, useObsoleteKana, customKanaMapping) => {\n    let map = getRomajiToKanaTree();\n\n    map = IMEMode ? IME_MODE_MAP(map) : map;\n    map = useObsoleteKana ? USE_OBSOLETE_KANA_MAP(map) : map;\n\n    if (customKanaMapping) {\n      map = mergeCustomMapping(map, customKanaMapping);\n    }\n\n    return map;\n  },\n  dequal\n);\n\n/**\n * Convert [Romaji](https://en.wikipedia.org/wiki/Romaji) to [Kana](https://en.wikipedia.org/wiki/Kana), lowercase text will result in [Hiragana](https://en.wikipedia.org/wiki/Hiragana) and uppercase text will result in [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @return {String} converted text\n * @example\n * toKana('onaji BUTTSUUJI')\n * // => 'おなじ ブッツウジ'\n * toKana('ONAJI buttsuuji')\n * // => 'オナジ ぶっつうじ'\n * toKana('座禅‘zazen’スタイル')\n * // => '座禅「ざぜん」スタイル'\n * toKana('batsuge-mu')\n * // => 'ばつげーむ'\n * toKana('!?.:/,~-‘’“”[](){}') // Punctuation conversion\n * // => '！？。：・、〜ー「」『』［］（）｛｝'\n * toKana('we', { useObsoleteKana: true })\n * // => 'ゑ'\n * toKana('wanakana', { customKanaMapping: { na: 'に', ka: 'bana' } });\n * // => 'わにbanaに'\n */\nfunction toKana(input = '', options = {}, map) {\n  let config;\n  if (!map) {\n    config = mergeWithDefaultOptions(options);\n    map = createRomajiToKanaMap(\n      config.IMEMode,\n      config.useObsoleteKana,\n      config.customKanaMapping\n    );\n  } else {\n    config = options;\n  }\n\n  // throw away the substring index information and just concatenate all the kana\n  return splitIntoConvertedKana(input, config, map)\n    .map((kanaToken) => {\n      const [start, end, kana] = kanaToken;\n      if (kana === null) {\n        // haven't converted the end of the string, since we are in IME mode\n        return input.slice(start);\n      }\n      const enforceHiragana = config.IMEMode === TO_KANA_METHODS.HIRAGANA;\n      const enforceKatakana = config.IMEMode === TO_KANA_METHODS.KATAKANA\n        || [...input.slice(start, end)].every(isCharUpperCase);\n\n      return enforceHiragana || !enforceKatakana\n        ? kana\n        : hiraganaToKatakana(kana);\n    })\n    .join('');\n}\n\n/**\n *\n * @private\n * @param {String} [input=''] input text\n * @param {DefaultOptions} [options=defaultOptions] toKana options\n * @param {Object} [map] custom mapping\n * @returns {Array[]} [[start, end, token]]\n * @example\n * splitIntoConvertedKana('buttsuuji')\n * // => [[0, 2, 'ぶ'], [2, 6, 'っつ'], [6, 7, 'う'], [7, 9, 'じ']]\n */\nfunction splitIntoConvertedKana(input = '', options = {}, map) {\n  const { IMEMode, useObsoleteKana, customKanaMapping } = options;\n\n  if (!map) {\n    map = createRomajiToKanaMap(IMEMode, useObsoleteKana, customKanaMapping);\n  }\n\n  return applyMapping(input.toLowerCase(), map, !IMEMode);\n}\n\nlet LISTENERS = [];\n/**\n * Automagically replaces input values with converted text to kana\n * @param  {defaultOptions} [options] user config overrides, default conversion is toKana()\n * @return {Function} event handler with bound options\n * @private\n */\nfunction makeOnInput(options) {\n  let prevInput;\n\n  // Enforce IMEMode if not already specified\n  const mergedConfig = Object.assign({}, mergeWithDefaultOptions(options), {\n    IMEMode: options.IMEMode || true,\n  });\n\n  const preConfiguredMap = createRomajiToKanaMap(\n    mergedConfig.IMEMode,\n    mergedConfig.useObsoleteKana,\n    mergedConfig.customKanaMapping\n  );\n\n  const triggers = [\n    ...Object.keys(preConfiguredMap),\n    ...Object.keys(preConfiguredMap).map((char) => char.toUpperCase()),\n  ];\n\n  return function onInput({ target }) {\n    if (\n      target.value !== prevInput\n      && target.dataset.ignoreComposition !== 'true'\n    ) {\n      convertInput(target, mergedConfig, preConfiguredMap, triggers);\n    }\n  };\n}\n\nfunction convertInput(target, options, map, triggers, prevInput) {\n  const [head, textToConvert, tail] = splitInput(\n    target.value,\n    target.selectionEnd,\n    triggers\n  );\n  const convertedText = toKana(textToConvert, options, map);\n  const changed = textToConvert !== convertedText;\n\n  if (changed) {\n    const newCursor = head.length + convertedText.length;\n    const newValue = head + convertedText + tail;\n    // eslint-disable-next-line no-param-reassign\n    target.value = newValue;\n\n    if (tail.length) {\n      // push later on event loop (otherwise mid-text insertion can be 1 char too far to the right)\n      setTimeout(() => target.setSelectionRange(newCursor, newCursor), 1);\n    } else {\n      target.setSelectionRange(newCursor, newCursor);\n    }\n  }\n}\n\nfunction onComposition({ type, target, data }) {\n  // navigator.platform is not 100% reliable for singling out all OS,\n  // but for determining desktop \"Mac OS\" it is effective enough.\n  const isMacOS = /Mac/.test(window.navigator && window.navigator.platform);\n  // We don't want to ignore on Android:\n  // https://github.com/WaniKani/WanaKana/issues/82\n  // But MacOS IME auto-closes if we don't ignore:\n  // https://github.com/WaniKani/WanaKana/issues/71\n  // Other platform Japanese IMEs pass through happily\n  if (isMacOS) {\n    if (type === 'compositionupdate' && isJapanese(data)) {\n      // eslint-disable-next-line no-param-reassign\n      target.dataset.ignoreComposition = 'true';\n    }\n\n    if (type === 'compositionend') {\n      // eslint-disable-next-line no-param-reassign\n      target.dataset.ignoreComposition = 'false';\n    }\n  }\n}\n\nfunction trackListeners(id, inputHandler, compositionHandler) {\n  LISTENERS = LISTENERS.concat({\n    id,\n    inputHandler,\n    compositionHandler,\n  });\n}\n\nfunction untrackListeners({ id: targetId }) {\n  LISTENERS = LISTENERS.filter(({ id }) => id !== targetId);\n}\n\nfunction findListeners(el) {\n  return (\n    el && LISTENERS.find(({ id }) => id === el.getAttribute('data-wanakana-id'))\n  );\n}\n\n// Handle non-terminal inserted input conversion:\n// | -> わ| -> わび| -> わ|び -> わs|び -> わsh|び -> わshi|び -> わし|び\n// or multiple ambiguous positioning (to select which \"s\" to work from)\n// こsこs|こsこ -> こsこso|こsこ -> こsこそ|こsこ\nfunction splitInput(text = '', cursor = 0, triggers = []) {\n  let head;\n  let toConvert;\n  let tail;\n\n  if (cursor === 0 && triggers.includes(text[0])) {\n    [head, toConvert, tail] = workFromStart(text, triggers);\n  } else if (cursor > 0) {\n    [head, toConvert, tail] = workBackwards(text, cursor);\n  } else {\n    [head, toConvert] = takeWhileAndSlice(\n      text,\n      (char) => !triggers.includes(char)\n    );\n    [toConvert, tail] = takeWhileAndSlice(\n      toConvert,\n      (char) => !isJapanese(char)\n    );\n  }\n\n  return [head, toConvert, tail];\n}\n\nfunction workFromStart(text, catalystChars) {\n  return [\n    '',\n    ...takeWhileAndSlice(\n      text,\n      (char) => catalystChars.includes(char) || !isJapanese(char, /[0-9]/)\n    ),\n  ];\n}\n\nfunction workBackwards(text = '', startIndex = 0) {\n  const [toConvert, head] = takeWhileAndSlice(\n    [...text.slice(0, startIndex)].reverse(),\n    (char) => !isJapanese(char)\n  );\n  return [\n    head.reverse().join(''),\n    toConvert\n      .split('')\n      .reverse()\n      .join(''),\n    text.slice(startIndex),\n  ];\n}\n\nfunction takeWhileAndSlice(source = {}, predicate = (x) => !!x) {\n  const result = [];\n  const { length } = source;\n  let i = 0;\n  while (i < length && predicate(source[i], i)) {\n    result.push(source[i]);\n    i += 1;\n  }\n  return [result.join(''), source.slice(i)];\n}\n\n/* eslint-disable no-console */\nconst onInput = ({ target: { value, selectionStart, selectionEnd } }) => console.log('input:', { value, selectionStart, selectionEnd });\nconst onCompositionStart = () => console.log('compositionstart');\nconst onCompositionUpdate = ({\n  target: { value, selectionStart, selectionEnd },\n  data,\n}) => console.log('compositionupdate', {\n  data,\n  value,\n  selectionStart,\n  selectionEnd,\n});\nconst onCompositionEnd = () => console.log('compositionend');\n\nconst events = {\n  input: onInput,\n  compositionstart: onCompositionStart,\n  compositionupdate: onCompositionUpdate,\n  compositionend: onCompositionEnd,\n};\n\nconst addDebugListeners = (input) => {\n  Object.entries(events).forEach(([event, handler]) => input.addEventListener(event, handler)\n  );\n};\n\nconst removeDebugListeners = (input) => {\n  Object.entries(events).forEach(([event, handler]) => input.removeEventListener(event, handler)\n  );\n};\n\nconst ELEMENTS = ['TEXTAREA', 'INPUT'];\n\nlet idCounter = 0;\nconst newId = () => {\n  idCounter += 1;\n  return `${Date.now()}${idCounter}`;\n};\n\n/**\n * Binds eventListener for 'input' events to an input field to automagically replace values with kana\n * Can pass `{ IMEMode: 'toHiragana' || 'toKatakana' }` to enforce kana conversion type\n * @param  {HTMLElement} element textarea, input[type=\"text\"] etc\n * @param  {DefaultOptions} [options=defaultOptions] defaults to { IMEMode: true } using `toKana`\n * @example\n * bind(document.querySelector('#myInput'));\n */\nfunction bind(element = {}, options = {}, debug = false) {\n  if (!ELEMENTS.includes(element.nodeName)) {\n    throw new Error(\n      `Element provided to Wanakana bind() was not a valid input or textarea element.\\n Received: (${JSON.stringify(\n        element\n      )})`\n    );\n  }\n  const onInput = makeOnInput(options);\n  const id = newId();\n  element.setAttribute('data-wanakana-id', id);\n  element.setAttribute('lang', 'ja');\n  element.setAttribute('autoCapitalize', 'none');\n  element.setAttribute('autoCorrect', 'off');\n  element.setAttribute('autoComplete', 'off');\n  element.setAttribute('spellCheck', 'false');\n  element.addEventListener('input', onInput);\n  element.addEventListener('compositionupdate', onComposition);\n  element.addEventListener('compositionend', onComposition);\n  trackListeners(id, onInput, onComposition);\n  if (debug === true) {\n    addDebugListeners(element);\n  }\n}\n\n/**\n * Unbinds eventListener from input field\n * @param  {HTMLElement} element textarea, input\n */\nfunction unbind(element, debug = false) {\n  const listeners = findListeners(element);\n  if (listeners == null) {\n    throw new Error(\n      `Element provided to Wanakana unbind() had no listener registered.\\n Received: ${JSON.stringify(\n        element\n      )}`\n    );\n  }\n  const { inputHandler, compositionHandler } = listeners;\n  element.removeAttribute('data-wanakana-id');\n  element.removeAttribute('data-ignore-composition');\n  element.removeEventListener('input', inputHandler);\n  element.removeEventListener('compositionstart', compositionHandler);\n  element.removeEventListener('compositionupdate', compositionHandler);\n  element.removeEventListener('compositionend', compositionHandler);\n  untrackListeners(listeners);\n  if (debug === true) {\n    removeDebugListeners(element);\n  }\n}\n\n/**\n * Tests a character. Returns true if the character is [Romaji](https://en.wikipedia.org/wiki/Romaji) (allowing [Hepburn romanisation](https://en.wikipedia.org/wiki/Hepburn_romanization))\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharRomaji(char = '') {\n  if (isEmpty(char)) return false;\n  return ROMAJI_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\n/**\n * Test if `input` is [Romaji](https://en.wikipedia.org/wiki/Romaji) (allowing [Hepburn romanisation](https://en.wikipedia.org/wiki/Hepburn_romanization))\n * @param  {String} [input=''] text\n * @param  {Regexp} [allowed] additional test allowed to pass for each char\n * @return {Boolean} true if [Romaji](https://en.wikipedia.org/wiki/Romaji)\n * @example\n * isRomaji('Tōkyō and Ōsaka')\n * // => true\n * isRomaji('12a*b&c-d')\n * // => true\n * isRomaji('あアA')\n * // => false\n * isRomaji('お願い')\n * // => false\n * isRomaji('a！b&cーd') // Zenkaku punctuation fails\n * // => false\n * isRomaji('a！b&cーd', /[！ー]/)\n * // => true\n */\nfunction isRomaji(input = '', allowed) {\n  const augmented = typeOf(allowed) === 'regexp';\n  return isEmpty(input)\n    ? false\n    : [...input].every((char) => {\n      const isRoma = isCharRomaji(char);\n      return !augmented ? isRoma : isRoma || allowed.test(char);\n    });\n}\n\n/**\n * Tests a character. Returns true if the character is [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharKatakana(char = '') {\n  return isCharInRange(char, KATAKANA_START, KATAKANA_END);\n}\n\n/**\n * Tests a character. Returns true if the character is [Hiragana](https://en.wikipedia.org/wiki/Hiragana) or [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharKana(char = '') {\n  if (isEmpty(char)) return false;\n  return isCharHiragana(char) || isCharKatakana(char);\n}\n\n/**\n * Test if `input` is [Kana](https://en.wikipedia.org/wiki/Kana) ([Katakana](https://en.wikipedia.org/wiki/Katakana) and/or [Hiragana](https://en.wikipedia.org/wiki/Hiragana))\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Kana](https://en.wikipedia.org/wiki/Kana)\n * @example\n * isKana('あ')\n * // => true\n * isKana('ア')\n * // => true\n * isKana('あーア')\n * // => true\n * isKana('A')\n * // => false\n * isKana('あAア')\n * // => false\n */\nfunction isKana(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharKana);\n}\n\n/**\n * Test if `input` is [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @example\n * isHiragana('げーむ')\n * // => true\n * isHiragana('A')\n * // => false\n * isHiragana('あア')\n * // => false\n */\nfunction isHiragana(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharHiragana);\n}\n\n/**\n * Test if `input` is [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @example\n * isKatakana('ゲーム')\n * // => true\n * isKatakana('あ')\n * // => false\n * isKatakana('A')\n * // => false\n * isKatakana('あア')\n * // => false\n */\nfunction isKatakana(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharKatakana);\n}\n\n/**\n * Tests a character. Returns true if the character is a CJK ideograph (kanji).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharKanji(char = '') {\n  return isCharInRange(char, KANJI_START, KANJI_END);\n}\n\n/**\n * Tests if `input` is [Kanji](https://en.wikipedia.org/wiki/Kanji) ([Japanese CJK ideographs](https://en.wikipedia.org/wiki/CJK_Unified_Ideographs))\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Kanji](https://en.wikipedia.org/wiki/Kanji)\n * @example\n * isKanji('刀')\n * // => true\n * isKanji('切腹')\n * // => true\n * isKanji('勢い')\n * // => false\n * isKanji('あAア')\n * // => false\n * isKanji('🐸')\n * // => false\n */\nfunction isKanji(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharKanji);\n}\n\n/**\n * Test if `input` contains a mix of [Romaji](https://en.wikipedia.org/wiki/Romaji) *and* [Kana](https://en.wikipedia.org/wiki/Kana), defaults to pass through [Kanji](https://en.wikipedia.org/wiki/Kanji)\n * @param  {String} input text\n * @param  {Object} [options={ passKanji: true }] optional config to pass through kanji\n * @return {Boolean} true if mixed\n * @example\n * isMixed('Abあア'))\n * // => true\n * isMixed('お腹A')) // ignores kanji by default\n * // => true\n * isMixed('お腹A', { passKanji: false }))\n * // => false\n * isMixed('ab'))\n * // => false\n * isMixed('あア'))\n * // => false\n */\nfunction isMixed(input = '', options = { passKanji: true }) {\n  const chars = [...input];\n  let hasKanji = false;\n  if (!options.passKanji) {\n    hasKanji = chars.some(isKanji);\n  }\n  return (chars.some(isHiragana) || chars.some(isKatakana)) && chars.some(isRomaji) && !hasKanji;\n}\n\nconst isCharInitialLongDash = (char, index) => isCharLongDash(char) && index < 1;\nconst isCharInnerLongDash = (char, index) => isCharLongDash(char) && index > 0;\nconst isKanaAsSymbol = (char) => ['ヶ', 'ヵ'].includes(char);\nconst LONG_VOWELS = {\n  a: 'あ',\n  i: 'い',\n  u: 'う',\n  e: 'え',\n  o: 'う',\n};\n\n// inject toRomaji to avoid circular dependency between toRomaji <-> katakanaToHiragana\nfunction katakanaToHiragana(\n  input = '',\n  toRomaji,\n  { isDestinationRomaji, convertLongVowelMark } = {}\n) {\n  let previousKana = '';\n\n  return input\n    .split('')\n    .reduce((hira, char, index) => {\n      // Short circuit to avoid incorrect codeshift for 'ー' and '・'\n      if (\n        isCharSlashDot(char)\n        || isCharInitialLongDash(char, index)\n        || isKanaAsSymbol(char)\n      ) {\n        return hira.concat(char);\n      }\n\n      // Transform long vowels: 'オー' to 'おう'\n      if (\n        convertLongVowelMark\n        && previousKana\n        && isCharInnerLongDash(char, index)\n      ) {\n        // Transform previousKana back to romaji, and slice off the vowel\n        const romaji = toRomaji(previousKana).slice(-1);\n        // However, ensure 'オー' => 'おお' => 'oo' if this is a transform on the way to romaji\n        if (\n          isCharKatakana(input[index - 1])\n          && romaji === 'o'\n          && isDestinationRomaji\n        ) {\n          return hira.concat('お');\n        }\n        return hira.concat(LONG_VOWELS[romaji]);\n        // Transform all other chars\n      }\n\n      if (!isCharLongDash(char) && isCharKatakana(char)) {\n        const code = char.charCodeAt(0) + (HIRAGANA_START - KATAKANA_START);\n        const hiraChar = String.fromCharCode(code);\n        previousKana = hiraChar;\n        return hira.concat(hiraChar);\n      }\n\n      // Pass non katakana chars through\n      previousKana = '';\n      return hira.concat(char);\n    }, [])\n    .join('');\n}\n\nlet kanaToHepburnMap = null;\n\n/* eslint-disable */\n// prettier-ignore\nconst BASIC_ROMAJI = {\n  あ:'a',    い:'i',   う:'u',   え:'e',    お:'o',\n  か:'ka',   き:'ki',  く:'ku',  け:'ke',   こ:'ko',\n  さ:'sa',   し:'shi', す:'su',  せ:'se',   そ:'so',\n  た:'ta',   ち:'chi', つ:'tsu', て:'te',   と:'to',\n  な:'na',   に:'ni',  ぬ:'nu',  ね:'ne',   の:'no',\n  は:'ha',   ひ:'hi',  ふ:'fu',  へ:'he',   ほ:'ho',\n  ま:'ma',   み:'mi',  む:'mu',  め:'me',   も:'mo',\n  ら:'ra',   り:'ri',  る:'ru',  れ:'re',   ろ:'ro',\n  や:'ya',   ゆ:'yu',  よ:'yo',\n  わ:'wa',   ゐ:'wi',  ゑ:'we',  を:'wo',\n  ん: 'n',\n  が:'ga',   ぎ:'gi',  ぐ:'gu',  げ:'ge',   ご:'go',\n  ざ:'za',   じ:'ji',  ず:'zu',  ぜ:'ze',   ぞ:'zo',\n  だ:'da',   ぢ:'ji',  づ:'zu',  で:'de',   ど:'do',\n  ば:'ba',   び:'bi',  ぶ:'bu',  べ:'be',   ぼ:'bo',\n  ぱ:'pa',   ぴ:'pi',  ぷ:'pu',  ぺ:'pe',   ぽ:'po',\n  ゔぁ:'va', ゔぃ:'vi', ゔ:'vu',  ゔぇ:'ve', ゔぉ:'vo',\n};\n/* eslint-enable  */\n\nconst SPECIAL_SYMBOLS = {\n  '。': '.',\n  '、': ',',\n  '：': ':',\n  '・': '/',\n  '！': '!',\n  '？': '?',\n  '〜': '~',\n  'ー': '-',\n  '「': '‘',\n  '」': '’',\n  '『': '“',\n  '』': '”',\n  '［': '[',\n  '］': ']',\n  '（': '(',\n  '）': ')',\n  '｛': '{',\n  '｝': '}',\n  '　': ' ',\n};\n\n// んい -> n'i\nconst AMBIGUOUS_VOWELS = ['あ', 'い', 'う', 'え', 'お', 'や', 'ゆ', 'よ'];\nconst SMALL_Y = { ゃ: 'ya', ゅ: 'yu', ょ: 'yo' };\nconst SMALL_Y_EXTRA = { ぃ: 'yi', ぇ: 'ye' };\nconst SMALL_AIUEO = {\n  ぁ: 'a',\n  ぃ: 'i',\n  ぅ: 'u',\n  ぇ: 'e',\n  ぉ: 'o',\n};\nconst YOON_KANA = [\n  'き',\n  'に',\n  'ひ',\n  'み',\n  'り',\n  'ぎ',\n  'び',\n  'ぴ',\n  'ゔ',\n  'く',\n  'ふ',\n];\nconst YOON_EXCEPTIONS = {\n  し: 'sh',\n  ち: 'ch',\n  じ: 'j',\n  ぢ: 'j',\n};\nconst SMALL_KANA = {\n  っ: '',\n  ゃ: 'ya',\n  ゅ: 'yu',\n  ょ: 'yo',\n  ぁ: 'a',\n  ぃ: 'i',\n  ぅ: 'u',\n  ぇ: 'e',\n  ぉ: 'o',\n};\n\n// going with the intuitive (yet incorrect) solution where っや -> yya and っぃ -> ii\n// in other words, just assume the sokuon could have been applied to anything\nconst SOKUON_WHITELIST = {\n  b: 'b',\n  c: 't',\n  d: 'd',\n  f: 'f',\n  g: 'g',\n  h: 'h',\n  j: 'j',\n  k: 'k',\n  m: 'm',\n  p: 'p',\n  q: 'q',\n  r: 'r',\n  s: 's',\n  t: 't',\n  v: 'v',\n  w: 'w',\n  x: 'x',\n  z: 'z',\n};\n\nfunction getKanaToHepburnTree() {\n  if (kanaToHepburnMap == null) {\n    kanaToHepburnMap = createKanaToHepburnMap();\n  }\n  return kanaToHepburnMap;\n}\n\nfunction getKanaToRomajiTree(romanization) {\n  switch (romanization) {\n    case ROMANIZATIONS.HEPBURN:\n      return getKanaToHepburnTree();\n    default:\n      return {};\n  }\n}\n\nfunction createKanaToHepburnMap() {\n  const romajiTree = transform(BASIC_ROMAJI);\n\n  const subtreeOf = (string) => getSubTreeOf(romajiTree, string);\n  const setTrans = (string, transliteration) => {\n    subtreeOf(string)[''] = transliteration;\n  };\n\n  Object.entries(SPECIAL_SYMBOLS).forEach(([jsymbol, symbol]) => {\n    subtreeOf(jsymbol)[''] = symbol;\n  });\n\n  [...Object.entries(SMALL_Y), ...Object.entries(SMALL_AIUEO)].forEach(\n    ([roma, kana]) => {\n      setTrans(roma, kana);\n    }\n  );\n\n  // きゃ -> kya\n  YOON_KANA.forEach((kana) => {\n    const firstRomajiChar = subtreeOf(kana)[''][0];\n    Object.entries(SMALL_Y).forEach(([yKana, yRoma]) => {\n      setTrans(kana + yKana, firstRomajiChar + yRoma);\n    });\n    // きぃ -> kyi\n    Object.entries(SMALL_Y_EXTRA).forEach(([yKana, yRoma]) => {\n      setTrans(kana + yKana, firstRomajiChar + yRoma);\n    });\n  });\n\n  Object.entries(YOON_EXCEPTIONS).forEach(([kana, roma]) => {\n    // じゃ -> ja\n    Object.entries(SMALL_Y).forEach(([yKana, yRoma]) => {\n      setTrans(kana + yKana, roma + yRoma[1]);\n    });\n    // じぃ -> jyi, じぇ -> je\n    setTrans(`${kana}ぃ`, `${roma}yi`);\n    setTrans(`${kana}ぇ`, `${roma}e`);\n  });\n\n  romajiTree['っ'] = resolveTsu(romajiTree);\n\n  Object.entries(SMALL_KANA).forEach(([kana, roma]) => {\n    setTrans(kana, roma);\n  });\n\n  AMBIGUOUS_VOWELS.forEach((kana) => {\n    setTrans(`ん${kana}`, `n'${subtreeOf(kana)['']}`);\n  });\n\n  // NOTE: could be re-enabled with an option?\n  // // んば -> mbo\n  // const LABIAL = [\n  //   'ば', 'び', 'ぶ', 'べ', 'ぼ',\n  //   'ぱ', 'ぴ', 'ぷ', 'ぺ', 'ぽ',\n  //   'ま', 'み', 'む', 'め', 'も',\n  // ];\n  // LABIAL.forEach((kana) => {\n  //   setTrans(`ん${kana}`, `m${subtreeOf(kana)['']}`);\n  // });\n\n  return Object.freeze(JSON.parse(JSON.stringify(romajiTree)));\n}\n\nfunction resolveTsu(tree) {\n  return Object.entries(tree).reduce((tsuTree, [key, value]) => {\n    if (!key) {\n      // we have reached the bottom of this branch\n      const consonant = value.charAt(0);\n      // eslint-disable-next-line no-param-reassign\n      tsuTree[key] = Object.keys(SOKUON_WHITELIST).includes(consonant)\n        ? SOKUON_WHITELIST[consonant] + value\n        : value;\n    } else {\n      // more subtrees\n      // eslint-disable-next-line no-param-reassign\n      tsuTree[key] = resolveTsu(value);\n    }\n    return tsuTree;\n  }, {});\n}\n\n// memoize and deeply compare args so we only recreate when necessary\nconst createKanaToRomajiMap = memoizeOne(\n  (romanization, customRomajiMapping) => {\n    let map = getKanaToRomajiTree(romanization);\n\n    if (customRomajiMapping) {\n      map = mergeCustomMapping(map, customRomajiMapping);\n    }\n\n    return map;\n  },\n  dequal\n);\n\n/**\n * Convert kana to romaji\n * @param  {String} kana text input\n * @param  {DefaultOptions} [options=defaultOptions]\n * @param  {Object} map custom mapping\n * @return {String} converted text\n * @example\n * toRomaji('ひらがな　カタカナ')\n * // => 'hiragana katakana'\n * toRomaji('げーむ　ゲーム')\n * // => 'ge-mu geemu'\n * toRomaji('ひらがな　カタカナ', { upcaseKatakana: true })\n * // => 'hiragana KATAKANA'\n * toRomaji('つじぎり', { customRomajiMapping: { じ: 'zi', つ: 'tu', り: 'li' } });\n * // => 'tuzigili'\n */\nfunction toRomaji(input = '', options = {}, map) {\n  const config = mergeWithDefaultOptions(options);\n\n  if (!map) {\n    map = createKanaToRomajiMap(\n      config.romanization,\n      config.customRomajiMapping\n    );\n  }\n\n  // just throw away the substring index information and simply concatenate all the kana\n  return splitIntoRomaji(input, config, map)\n    .map((romajiToken) => {\n      const [start, end, romaji] = romajiToken;\n      const makeUpperCase = config.upcaseKatakana && isKatakana(input.slice(start, end));\n      return makeUpperCase ? romaji.toUpperCase() : romaji;\n    })\n    .join('');\n}\n\nfunction splitIntoRomaji(input, options, map) {\n  if (!map) {\n    map = createKanaToRomajiMap(\n      options.romanization,\n      options.customRomajiMapping\n    );\n  }\n\n  const config = Object.assign({}, { isDestinationRomaji: true }, options);\n\n  return applyMapping(\n    katakanaToHiragana(input, toRomaji, config),\n    map,\n    !options.IMEMode\n  );\n}\n\n/**\n * Tests a character. Returns true if the character is considered English punctuation.\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharEnglishPunctuation(char = '') {\n  if (isEmpty(char)) return false;\n  return EN_PUNCTUATION_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\n/**\n * Convert input to [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @return {String} converted text\n * @example\n * toHiragana('toukyou, オオサカ')\n * // => 'とうきょう、　おおさか'\n * toHiragana('only カナ', { passRomaji: true })\n * // => 'only かな'\n * toHiragana('wi')\n * // => 'うぃ'\n * toHiragana('wi', { useObsoleteKana: true })\n * // => 'ゐ'\n */\nfunction toHiragana(input = '', options = {}) {\n  const config = mergeWithDefaultOptions(options);\n  if (config.passRomaji) {\n    return katakanaToHiragana(input, toRomaji, config);\n  }\n\n  if (isMixed(input, { passKanji: true })) {\n    const convertedKatakana = katakanaToHiragana(input, toRomaji, config);\n    return toKana(convertedKatakana.toLowerCase(), config);\n  }\n\n  if (isRomaji(input) || isCharEnglishPunctuation(input)) {\n    return toKana(input.toLowerCase(), config);\n  }\n\n  return katakanaToHiragana(input, toRomaji, config);\n}\n\n/**\n * Convert input to [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @return {String} converted text\n * @example\n * toKatakana('toukyou, おおさか')\n * // => 'トウキョウ、　オオサカ'\n * toKatakana('only かな', { passRomaji: true })\n * // => 'only カナ'\n * toKatakana('wi')\n * // => 'ウィ'\n * toKatakana('wi', { useObsoleteKana: true })\n * // => 'ヰ'\n */\nfunction toKatakana(input = '', options = {}) {\n  const mergedOptions = mergeWithDefaultOptions(options);\n  if (mergedOptions.passRomaji) {\n    return hiraganaToKatakana(input);\n  }\n\n  if (isMixed(input) || isRomaji(input) || isCharEnglishPunctuation(input)) {\n    const hiragana = toKana(input.toLowerCase(), mergedOptions);\n    return hiraganaToKatakana(hiragana);\n  }\n\n  return hiraganaToKatakana(input);\n}\n\n/**\n * Tests a character. Returns true if the character is considered English punctuation.\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharJapanesePunctuation(char = '') {\n  if (isEmpty(char)) return false;\n  return JA_PUNCTUATION_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nconst isCharEnSpace = (x) => x === ' ';\nconst isCharJaSpace = (x) => x === '　';\nconst isCharJaNum = (x) => /[０-９]/.test(x);\nconst isCharEnNum = (x) => /[0-9]/.test(x);\n\nconst TOKEN_TYPES = {\n  EN: 'en',\n  JA: 'ja',\n  EN_NUM: 'englishNumeral',\n  JA_NUM: 'japaneseNumeral',\n  EN_PUNC: 'englishPunctuation',\n  JA_PUNC: 'japanesePunctuation',\n  KANJI: 'kanji',\n  HIRAGANA: 'hiragana',\n  KATAKANA: 'katakana',\n  SPACE: 'space',\n  OTHER: 'other',\n};\n\n// prettier-ignore\nfunction getType(input, compact = false) {\n  const {\n    EN, JA, EN_NUM, JA_NUM, EN_PUNC, JA_PUNC, KANJI, HIRAGANA, KATAKANA, SPACE, OTHER,\n  } = TOKEN_TYPES;\n\n  if (compact) {\n    switch (true) {\n      case isCharJaNum(input): return OTHER;\n      case isCharEnNum(input): return OTHER;\n      case isCharEnSpace(input): return EN;\n      case isCharEnglishPunctuation(input): return OTHER;\n      case isCharJaSpace(input): return JA;\n      case isCharJapanesePunctuation(input): return OTHER;\n      case isCharJapanese(input): return JA;\n      case isCharRomaji(input): return EN;\n      default: return OTHER;\n    }\n  } else {\n    switch (true) {\n      case isCharJaSpace(input): return SPACE;\n      case isCharEnSpace(input): return SPACE;\n      case isCharJaNum(input): return JA_NUM;\n      case isCharEnNum(input): return EN_NUM;\n      case isCharEnglishPunctuation(input): return EN_PUNC;\n      case isCharJapanesePunctuation(input): return JA_PUNC;\n      case isCharKanji(input): return KANJI;\n      case isCharHiragana(input): return HIRAGANA;\n      case isCharKatakana(input): return KATAKANA;\n      case isCharJapanese(input): return JA;\n      case isCharRomaji(input): return EN;\n      default: return OTHER;\n    }\n  }\n}\n\n/**\n * Splits input into array of strings separated by opinionated token types\n * `'en', 'ja', 'englishNumeral', 'japaneseNumeral','englishPunctuation', 'japanesePunctuation','kanji', 'hiragana', 'katakana', 'space', 'other'`.\n * If `{ compact: true }` then many same-language tokens are combined (spaces + text, kanji + kana, numeral + punctuation).\n * If `{ detailed: true }` then return array will contain `{ type, value }` instead of `'value'`\n * @param  {String} input text\n * @param  {Object} [options={ compact: false, detailed: false}] options to modify output style\n * @return {String|Object[]} text split into tokens containing values, or detailed object\n * @example\n * tokenize('ふふフフ')\n * // ['ふふ', 'フフ']\n *\n * tokenize('感じ')\n * // ['感', 'じ']\n *\n * tokenize('truly 私は悲しい')\n * // ['truly', ' ', '私', 'は', '悲', 'しい']\n *\n * tokenize('truly 私は悲しい', { compact: true })\n * // ['truly ', '私は悲しい']\n *\n * tokenize('5romaji here...!?漢字ひらがな４カタ　カナ「ＳＨＩＯ」。！')\n * // [ '5', 'romaji', ' ', 'here', '...!?', '漢字', 'ひらがな', 'カタ', '　', 'カナ', '４', '「', 'ＳＨＩＯ', '」。！']\n *\n * tokenize('5romaji here...!?漢字ひらがな４カタ　カナ「ＳＨＩＯ」。！', { compact: true })\n * // [ '5', 'romaji here', '...!?', '漢字ひらがなカタ　カナ', '４「', 'ＳＨＩＯ', '」。！']\n *\n * tokenize('5romaji here...!?漢字ひらがなカタ　カナ４「ＳＨＩＯ」。！ لنذهب', { detailed: true })\n * // [\n *  { type: 'englishNumeral', value: '5' },\n *  { type: 'en', value: 'romaji' },\n *  { type: 'space', value: ' ' },\n *  { type: 'en', value: 'here' },\n *  { type: 'englishPunctuation', value: '...!?' },\n *  { type: 'kanji', value: '漢字' },\n *  { type: 'hiragana', value: 'ひらがな' },\n *  { type: 'katakana', value: 'カタ' },\n *  { type: 'space', value: '　' },\n *  { type: 'katakana', value: 'カナ' },\n *  { type: 'japaneseNumeral', value: '４' },\n *  { type: 'japanesePunctuation', value: '「' },\n *  { type: 'ja', value: 'ＳＨＩＯ' },\n *  { type: 'japanesePunctuation', value: '」。！' },\n *  { type: 'space', value: ' ' },\n *  { type: 'other', value: 'لنذهب' },\n * ]\n *\n * tokenize('5romaji here...!?漢字ひらがなカタ　カナ４「ＳＨＩＯ」。！ لنذهب', { compact: true, detailed: true})\n * // [\n *  { type: 'other', value: '5' },\n *  { type: 'en', value: 'romaji here' },\n *  { type: 'other', value: '...!?' },\n *  { type: 'ja', value: '漢字ひらがなカタ　カナ' },\n *  { type: 'other', value: '４「' },\n *  { type: 'ja', value: 'ＳＨＩＯ' },\n *  { type: 'other', value: '」。！' },\n *  { type: 'en', value: ' ' },\n *  { type: 'other', value: 'لنذهب' },\n *]\n */\nfunction tokenize(input, { compact = false, detailed = false } = {}) {\n  if (input == null || isEmpty(input)) {\n    return [];\n  }\n  const chars = [...input];\n  let initial = chars.shift();\n  let prevType = getType(initial, compact);\n  initial = detailed ? { type: prevType, value: initial } : initial;\n\n  const result = chars.reduce(\n    (tokens, char) => {\n      const currType = getType(char, compact);\n      const sameType = currType === prevType;\n      prevType = currType;\n      let newValue = char;\n\n      if (sameType) {\n        newValue = (detailed ? tokens.pop().value : tokens.pop()) + newValue;\n      }\n\n      return detailed\n        ? tokens.concat({ type: currType, value: newValue })\n        : tokens.concat(newValue);\n    },\n    [initial]\n  );\n  return result;\n}\n\nconst isLeadingWithoutInitialKana = (input, leading) => leading && !isKana(input[0]);\nconst isTrailingWithoutFinalKana = (input, leading) => !leading && !isKana(input[input.length - 1]);\nconst isInvalidMatcher = (input, matchKanji) =>\n  (matchKanji && ![...matchKanji].some(isKanji)) || (!matchKanji && isKana(input));\n\n/**\n * Strips [Okurigana](https://en.wikipedia.org/wiki/Okurigana)\n * @param  {String} input text\n * @param  {Object} [options={ leading: false, matchKanji: '' }] optional config\n * @return {String} text with okurigana removed\n * @example\n * stripOkurigana('踏み込む')\n * // => '踏み込'\n * stripOkurigana('お祝い')\n * // => 'お祝'\n * stripOkurigana('お腹', { leading: true });\n * // => '腹'\n * stripOkurigana('ふみこむ', { matchKanji: '踏み込む' });\n * // => 'ふみこ'\n * stripOkurigana('おみまい', { matchKanji: 'お祝い', leading: true });\n * // => 'みまい'\n */\nfunction stripOkurigana(input = '', { leading = false, matchKanji = '' } = {}) {\n  if (\n    !isJapanese(input) ||\n    isLeadingWithoutInitialKana(input, leading) ||\n    isTrailingWithoutFinalKana(input, leading) ||\n    isInvalidMatcher(input, matchKanji)\n  ) {\n    return input;\n  }\n\n  const chars = matchKanji || input;\n  const okuriganaRegex = new RegExp(\n    leading ? `^${tokenize(chars).shift()}` : `${tokenize(chars).pop()}$`\n  );\n  return input.replace(okuriganaRegex, '');\n}\n\nexport { ROMANIZATIONS, TO_KANA_METHODS, VERSION, bind, isHiragana, isJapanese, isKana, isKanji, isKatakana, isMixed, isRomaji, stripOkurigana, toHiragana, toKana, toKatakana, toRomaji, tokenize, unbind };\n//# sourceMappingURL=index.js.map\n","\nimport { Component, Vue, Prop, Watch } from \"vue-property-decorator\";\nimport { mapGetters, mapActions } from \"vuex\";\n// import { random } from \"lodash\";\nimport { eUserAnswer } from \"@/assets/interfaces\";\nimport { bind } from \"wanakana\";\n\n@Component({\n  components: {},\n  methods: {\n    ...mapGetters(\"subjects\", [\"getQuestions\", \"getQuestion\"]),\n    ...mapActions(\"subjects\", [\"updateAnswer\"])\n  },\n  data() {\n   return {\n     // question: null,\n     answer: \"\",\n     answered: false\n   }\n  }\n})\nexport default class Question extends Vue {\n  @Prop() question: any;\n  mounted(){\n    const self: any = this;\n    // self.question = self.RandomQuestion();\n    bind(self.$refs[\"input\"].$el);\n  }\n\nget pathPieces(){\n  const self: any = this;\n  debugger;\n  return self.fullQuestion.path.split(\".\");\n}\n\n  // nextQuestion(){\n  //   // self.question = self.RandomQuestion();\n  //   self.answer = \"\";\n  //   self.answered = false;\n  // }\n\n  get fullQuestion(){\n    const self: any = this;\n    return self.getQuestion()(self.question);\n  }\n\n  // RandomQuestion() {\n  //   const self: any = this;\n  //   // return self.getQuestions();\n  //   const qs = self.getQuestions();\n  //   return self.getQuestion()(qs[random(0, qs.length - 1)]);\n  // }\n\n  submit(){\n    const self: any = this;\n    self.correct = self.answer == self.fullQuestion.kana || self.answer == self.fullQuestion.kanji;\n    self.answered = true;\n    self.updateAnswer({path: self.fullQuestion.path, answer: self.correct ? eUserAnswer.Correct : eUserAnswer.Incorrect});\n  }\n\n  enter(){\n    const self: any = this;\n    if(!self.answered){\n      self.submit();\n    } else {\n      // const p = {id: self.fullQuestion.id, answer: self.correct ? eUserAnswer.Correct : eUserAnswer.Incorrect};\n      self.$emit('next', self.correct ? eUserAnswer.Correct : eUserAnswer.Incorrect);\n    }\n  }\n\n  @Watch(\"question\")\n  questionChange(){\n    const self: any = this;\n    self.answer = \"\";\n    self.answered = false;\n  }\n}\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--15-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--15-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Question.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--15-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--15-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Question.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Question.vue?vue&type=template&id=27c362fa&scoped=true&\"\nimport script from \"./Question.vue?vue&type=script&lang=ts&\"\nexport * from \"./Question.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Question.vue?vue&type=style&index=0&id=27c362fa&prod&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"27c362fa\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('b-container',[_c('b-row',[_c('b-col',[_c('b-form-group',{attrs:{\"label\":\"Levels\",\"label-for\":\"chkLevels\"}},[_c('b-form-checkbox-group',{attrs:{\"id\":\"chkLevels\",\"name\":\"Levels\",\"options\":_vm.levels},model:{value:(_vm.selectedLevels),callback:function ($$v) {_vm.selectedLevels=$$v},expression:\"selectedLevels\"}})],1)],1),_c('b-col',[_c('b-form-group',{attrs:{\"label\":\"Positivity\",\"label-for\":\"chkPositivity\"}},[_c('b-form-checkbox-group',{attrs:{\"id\":\"chkPositivity\",\"name\":\"Positivity\",\"options\":_vm.ops.positivity},model:{value:(_vm.selectedPositivity),callback:function ($$v) {_vm.selectedPositivity=$$v},expression:\"selectedPositivity\"}})],1)],1),_c('b-col',[_c('b-form-group',{attrs:{\"label\":\"Politeness\",\"label-for\":\"chkPoliteness\"}},[_c('b-form-checkbox-group',{attrs:{\"id\":\"chkPoliteness\",\"name\":\"Politeness\",\"options\":_vm.ops.politeness},model:{value:(_vm.selectedPoliteness),callback:function ($$v) {_vm.selectedPoliteness=$$v},expression:\"selectedPoliteness\"}})],1)],1),_c('b-col',[_c('b-form-group',{attrs:{\"label\":\"Form\",\"label-for\":\"chkForm\"}},[_c('b-form-checkbox-group',{attrs:{\"id\":\"chkForm\",\"name\":\"Form\",\"options\":_vm.ops.form},model:{value:(_vm.selectedForm),callback:function ($$v) {_vm.selectedForm=$$v},expression:\"selectedForm\"}})],1)],1)],1),_c('b-row',[_c('b-col',[_c('b-button',{on:{\"click\":function($event){$event.preventDefault();return _vm.$emit('optionsSet', true)}}},[_vm._v(\"Go\")])],1)],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\nimport { Component, Vue } from \"vue-property-decorator\";\nimport { mapState, mapActions, mapGetters } from \"vuex\";\n\n@Component({\n  components: {},\n  computed: {\n    ...mapState(\"options\", [\"options\", \"selected\"]),\n  },\n  methods: {\n    ...mapActions(\"options\", [\n      // \"updatedSelected\",\n      \"updateSelectedPositivity\", \"updateSelectedPoliteness\", \"updateSelectedForm\", \"updateSelectedLevels\"]),\n    ...mapGetters(\"userData\", [\"getLevels\"]),\n  },\n  data() {\n    return {\n      // selected: {\n      //   positivity: [],\n      //   politeness: [],\n      //   form: []\n      // },\n    };\n  },\n})\nexport default class Options extends Vue {\n  get ops() {\n    const self: any = this;\n    return self.options;\n  }\n  // get sel() {\n  //   const self: any = this;\n  //   return self.selected;\n  // }\n  // set sel(value) {\n  //   const self: any = this;\n  //   self.updateSelected(value);\n  // }\n  get levels() {\n    const self: any = this;\n    return self.getLevels();\n  }\n  get selectedPositivity(){\n    const self: any = this;\n     return self.selected.positivity;\n  }\n  set selectedPositivity(value){\n    const self: any = this;\n    self.updateSelectedPositivity(value);\n  }\n  get selectedPoliteness(){\n    const self: any = this;\n     return self.selected.politeness;\n  }\n  set selectedPoliteness(value){\n    const self: any = this;\n    self.updateSelectedPoliteness(value);\n  }\n  get selectedForm(){\n    const self: any = this;\n     return self.selected.form;\n  }\n  set selectedForm(value){\n    const self: any = this;\n    self.updateSelectedForm(value);\n  }\n  get selectedLevels(){\n    const self: any = this;\n     return self.selected.levels;\n  }\n  set selectedLevels(value){\n    const self: any = this;\n    self.updateSelectedLevels(value);\n  }\n}\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--15-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--15-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Options.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--15-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--15-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Options.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Options.vue?vue&type=template&id=30a60496&scoped=true&\"\nimport script from \"./Options.vue?vue&type=script&lang=ts&\"\nexport * from \"./Options.vue?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"30a60496\",\n  null\n  \n)\n\nexport default component.exports","\nimport { Component, Vue } from \"vue-property-decorator\";\nimport Question from \"@/components/Question.vue\";\nimport Options from \"@/components/Options\";\nimport { mapGetters } from \"vuex\";\nimport { random } from \"lodash\";\nimport { eUserAnswer } from \"@/assets/interfaces\";\n\n@Component({\n  components: {\n    question: Question,\n    options: Options,\n  },\n  methods: {\n    ...mapGetters(\"subjects\", [\"getQuestions\"]),\n  },\n  data() {\n    return {\n      questions: [],\n      currentQuestion: null,\n      totalQuestions: 0,\n      progress: 0\n    };\n  },\n})\nexport default class Test extends Vue {\n  mounted(){\n    const self: any = this;\n    self.questions = self.getQuestions();\n    self.totalQuestions = self.questions.length;\n  }\n\n  // get correctSoFar(){\n  //   const self: any = this;\n  //   return self.questions.filter((q: any) => q.answered == eUserAnswer.Correct).length;\n  // }\n  //\n  // get incorrectSoFar(){\n  //   const self: any = this;\n  //   return self.questions.filter((q: any) => q.answered == eUserAnswer.Incorrect).length;\n  // }\n\n  start(){\n    const self: any = this;\n    self.currentQuestion = self.randomQuestion();\n  }\n\n  nextQuestion(answer = eUserAnswer.Incorrect){\n    const self: any = this;\n    debugger;\n    if(answer == eUserAnswer.Correct){\n      self.progress = self.progress + 1;\n      self.questions.pop(self.currentQuestion);\n    }\n    self.currentQuestion = self.randomQuestion();\n  }\n\n  randomQuestion() {\n    const self: any = this;\n    // return self.getQuestion()(self.questions[random(0, self.questions.length - 1)]);\n    return self.questions.filter((q: any) => q.answered != eUserAnswer.Correct)[random(0, self.questions.length - 1)];\n  }\n}\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--15-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--15-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Test.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--15-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--15-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Test.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Test.vue?vue&type=template&id=3012e172&scoped=true&\"\nimport script from \"./Test.vue?vue&type=script&lang=ts&\"\nexport * from \"./Test.vue?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"3012e172\",\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}